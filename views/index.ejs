<!-- views/index.ejs with improved UI -->

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GPT Chat</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f0f0;
            color: #333;
        }
        /* 컨테이너를 중앙 정렬하고 최대 너비 설정 */
        .page-container {
            max-width: 1000px;
            margin: 0 auto;
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
        }
        /* 사용자 컨트롤 영역 수정 - 헤더와 통합 */
        .user-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
            background-color: #007bff;
            color: white;
            height: 60px;
            border-radius: 0;
        }
        .title-area {
            font-size: 1.5rem;
            font-weight: bold;
        }
        .user-info {
            display: flex;
            align-items: center;
        }
        .btn {
            padding: 6px 12px;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
            text-decoration: none;
            font-size: 0.9rem;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        .btn-logout {
            background-color: rgba(255, 255, 255, 0.2);
            margin-left: 10px;
        }
        .btn-logout:hover {
            background-color: rgba(255, 255, 255, 0.3);
        }
        .chat-container {
            background-color: white;
            display: flex;
            justify-content: space-between;
            border-radius: 0;
            overflow: hidden;
        }
        .controls {
            display: flex;
            justify-content: space-between;
            padding: 10px 20px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #eee;
        }
        #assistant-select {
            flex-grow: 1;
            margin-right: 10px;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .btn-success {
            background-color: #28a745;
        }
        .btn-success:hover {
            background-color: #218838;
        }
        #chatbox {
            height: 450px; /* 높이 늘림 */
            overflow-y: scroll;
            padding: 20px;
            background-color: #f9f9f9;
            flex-grow: 1;
            position: relative; /* 로딩 오버레이를 위한 포지션 설정 */
        }
        .message {
            margin-bottom: 10px;
            padding: 10px 15px;
            border-radius: 8px;
            white-space: pre-wrap;
            word-break: break-word;
            max-width: 80%;
        }
        .user-message {
            background-color: #007bff;
            color: white;
            text-align: right;
            margin-left: auto;
        }
        .assistant-message {
            background-color: #e9ecef;
            text-align: left;
        }
        .error {
            color: #dc3545;
            font-weight: bold;
        }
        #game-load-list {
            width: 250px;
            background-color: #f8f9fa;
            padding: 20px;
            border-left: 1px solid #eee;
        }
        #game-load-list h3 {
            text-align: center;
            margin-top: 0;
            color: #343a40;
            font-size: 1.2rem;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        .game-entry {
            margin-bottom: 15px;
            padding: 12px;
            background-color: white;
            border-radius: 6px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.15);
            transition: all 0.3s ease;
            border-left: 3px solid transparent;
        }
        .game-entry:hover {
            box-shadow: 0 3px 8px rgba(0,0,0,0.2);
            transform: translateY(-2px);
        }
        .game-entry span {
            display: block;
            margin-bottom: 5px;
            font-size: 0.9rem;
        }
        .game-entry button {
            margin-right: 5px;
            margin-top: 5px;
        }
        .choice-buttons {
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin: 15px 0;
        }
        .choice-button {
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-align: left;
            transition: background-color 0.2s;
            width: 100%;
        }
        .choice-button:hover {
            background-color: #0056b3;
        }
        .choice-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        .game-actions {
            display: flex;
        }
        .game-actions button {
            flex: 1;
        }
        .btn-primary {
            background-color: #007bff;
        }
        .btn-primary:hover {
            background-color: #0056b3;
        }
        .btn-danger {
            background-color: #dc3545;
        }
        .btn-danger:hover {
            background-color: #c82333;
        }
        .system-message {
            background-color: #f8f9fa;
            border-left: 4px solid #6c757d;
            padding: 10px 15px;
            margin: 10px 0;
            border-radius: 4px;
            text-align: left;
            font-size: 0.9rem;
        }
        .system-message.error {
            background-color: #fff8f8;
            border-left: 4px solid #dc3545;
            color: #dc3545;
        }
        #connection-error {
            position: sticky;
            top: 0;
            z-index: 100;
            margin: 0;
            width: 100%;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        #manual-reconnect, #restart-button {
            display: block;
            margin: 8px auto 0 auto;
        }
        .btn-warning {
            background-color: #ffc107;
            color: #212529;
        }
        .btn-warning:hover {
            background-color: #e0a800;
        }
        .mt-2 {
            margin-top: 0.5rem !important;
        }
        /* 로딩 오버레이 스타일 */
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            display: none;
        }
        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        .loading-text {
            margin-top: 15px;
            font-weight: bold;
            color: #007bff;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        /* 버튼 로딩 상태 */
        .btn-loading {
            position: relative;
            cursor: not-allowed;
            color: transparent !important;
        }
        .btn-loading::after {
            content: "";
            position: absolute;
            width: 16px;
            height: 16px;
            top: calc(50% - 8px);
            left: calc(50% - 8px);
            border: 2px solid rgba(255, 255, 255, 0.5);
            border-radius: 50%;
            border-top: 2px solid white;
            animation: spin 1s linear infinite;
        }
        /* 현재 선택된 게임 하이라이트 */
        .game-entry.current-game {
            border-left-color: #007bff;
            background-color: rgba(0, 123, 255, 0.05);
        }
        
        /* 위치 정보 강조 스타일 */
        .location-info {
            display: block;
            margin: 8px 0;
            padding: 6px 8px;
            background-color: #f8f9fa;
            border-radius: 4px;
            font-size: 0.95rem;
            border-left: 3px solid #28a745;
        }
        
        .location-info strong {
            color: #28a745;
        }
        
        /* 애니메이션 효과로 업데이트 강조 */
        @keyframes highlight-update {
            0% { background-color: rgba(40, 167, 69, 0.2); }
            100% { background-color: transparent; }
        }
        
        .location-info.updated {
            animation: highlight-update 2s ease-out;
        }
    </style>
</head>
<body>
    <div class="page-container">
        <!-- 헤더와 사용자 컨트롤 통합 -->
        <div class="user-controls">
            <div class="title-area">[2025-03-08] GPT Assistants Chat</div>
            <div class="user-info">
                <%= username %> 님 환영합니다
                <a href="/auth/logout" class="btn btn-logout" id="logout-button">로그아웃</a>
            </div>
        </div>
        
        <div class="chat-container">
            <div style="flex: 1; display: flex; flex-direction: column;">
                <div class="controls">
                    <select id="assistant-select">
                        <% assistants.forEach(function(assistant) { %>
                            <option value="<%= assistant.id %>"><%= assistant.name %></option>
                        <% }); %>
                    </select>
                    <button id="new-game" class="btn btn-success">새 게임</button>
                    <button id="save-game" class="btn btn-success" style="margin-left: 5px;">게임 저장</button>
                </div>
                <div id="chatbox">
                    <!-- 로딩 오버레이 -->
                    <div id="loading-overlay" class="loading-overlay">
                        <div class="spinner"></div>
                        <div class="loading-text">처리 중입니다...</div>
                    </div>
                </div>
            </div>

            <div id="game-load-list">
                <h3>저장된 게임 목록</h3>
                <div id="saved_games_list">
                    <!-- 저장된 게임 리스트가 여기에 표시됩니다 -->
                </div>
            </div>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            // socket 초기화 개선
            const socket = io({
                reconnection: true,
                reconnectionAttempts: 10,
                reconnectionDelay: 1000,
                reconnectionDelayMax: 5000,
                timeout: 20000
            });
            
            let currentGameId = null;
            let gameData = null;
            let isConnected = false;
            
            // 소켓 연결 상태 관리
            socket.on('connect', function() {
                console.log('Socket connected successfully');
                isConnected = true;
                
                // 연결 상태 표시 제거 (있는 경우)
                $('#connection-error').remove();
                
                // 연결 후 즉시 게임 목록 로드
                loadGamesList();
            });
            
            socket.on('disconnect', function() {
                console.log('Socket disconnected');
                isConnected = false;
                
                // 연결 끊김 메시지 표시
                if ($('#connection-error').length === 0) {
                    $('#chatbox').append(`
                        <div id="connection-error" class="system-message error">
                            서버 연결이 끊어졌습니다. 재연결 중...
                            <button id="manual-reconnect" class="btn btn-primary mt-2">수동 재연결</button>
                        </div>
                    `);
                    
                    $('#manual-reconnect').click(function() {
                        $('#connection-error').text('재연결 시도 중...');
                        socket.connect();
                    });
                }
            });
            
            socket.on('connect_error', function(error) {
                console.error('Socket connection error:', error);
                
                // 연결 오류 메시지 표시
                if ($('#connection-error').length === 0) {
                    $('#chatbox').append(`
                        <div id="connection-error" class="system-message error">
                            서버 연결 오류: ${error.message || '알 수 없는 오류'}
                            <button id="manual-reconnect" class="btn btn-primary mt-2">수동 재연결</button>
                        </div>
                    `);
                    
                    $('#manual-reconnect').click(function() {
                        $('#connection-error').text('재연결 시도 중...');
                        socket.connect();
                    });
                }
            });

            // 로딩 오버레이 표시/숨김 함수
            function showLoading(message = '처리 중입니다...') {
                $('#loading-overlay .loading-text').text(message);
                $('#loading-overlay').fadeIn(200);
            }
            
            function hideLoading() {
                $('#loading-overlay').fadeOut(200);
            }
            
            // 버튼 로딩 상태 설정 함수
            function setButtonLoading(button, isLoading) {
                if (isLoading) {
                    button.prop('disabled', true).addClass('btn-loading');
                } else {
                    button.prop('disabled', false).removeClass('btn-loading');
                }
            }

            // 게임 목록 로드 함수 개선 - 강제 새로고침 옵션 추가
            function loadGamesList(forceRefresh = false) {
                if (socket && socket.connected) {
                    console.log('게임 목록 로드 요청' + (forceRefresh ? ' (강제 갱신)' : ''));
                    
                    // 강제 새로고침 시 UI 먼저 초기화
                    if (forceRefresh) {
                        const savedGamesList = $('#saved_games_list');
                        savedGamesList.empty();
                        savedGamesList.append('<p>게임 목록 업데이트 중...</p>');
                    }
                    
                    socket.emit('get games list', { forceRefresh: forceRefresh });
                } else {
                    console.error('Socket not connected. Cannot load games list.');
                }
            }
            
            // 게임 다시 시작 함수
            function restartGame() {
                console.log('게임 다시 시작');
                $('#assistant-select').prop('disabled', false);
                $('#chatbox').empty();
                currentGameId = null;
                gameData = null;
                
                // 선택지 버튼 제거
                $('.choice-buttons').remove();
                
                // 시스템 메시지 표시
                $('#chatbox').append(`
                    <div class="system-message">
                        게임이 초기화되었습니다. '새 게임' 버튼을 눌러 게임을 시작하세요.
                    </div>
                `);
            }
            
            // 전역 재시작 버튼 이벤트 설정
            $(document).on('click', '#restart-button', function() {
                restartGame();
            });

            // 요약 텍스트에서 위치 정보 추출 함수
            function extractLocationFromSummary(summary) {
                if (!summary) return null;
                
                // 패턴 1: "현재 위치는 [위치]" 패턴
                let locationPattern1 = /현재\s*위치(?:는|:)\s*([^,.]+?)(?:로|에서|입니다|에|이며|\.|\,|$)/i;
                let match1 = summary.match(locationPattern1);
                
                // 패턴 2: "위치: [위치]" 패턴
                let locationPattern2 = /위치\s*:\s*([^,.]+?)(?:로|에서|입니다|에|이며|\.|\,|$)/i;
                let match2 = summary.match(locationPattern2);
                
                // 패턴 3: "위치는 [위치]" 패턴
                let locationPattern3 = /위치는\s*([^,.]+?)(?:로|에서|입니다|에|이며|\.|\,|$)/i;
                let match3 = summary.match(locationPattern3);
                
                console.log('요약 내용:', summary);
                console.log('패턴 매칭 결과:', { match1, match2, match3 });
                
                // 매칭된 패턴 중 첫 번째 것 사용
                if (match1) return match1[1].trim();
                if (match2) return match2[1].trim();
                if (match3) return match3[1].trim();
                
                return null;
            }

            // 선택지 버튼 생성 함수 수정
            function createChoiceButtons(message) {
                // 이전 선택지 버튼들 제거
                $('.choice-buttons').remove();
                
                // 연결 상태 확인
                if (!isConnected) {
                    console.warn('소켓 연결이 끊어져 선택지를 생성할 수 없습니다.');
                    
                    const errorMessage = $(`
                        <div class="system-message error">
                            서버 연결이 끊어져 게임을 진행할 수 없습니다.
                            <button id="manual-reconnect" class="btn btn-primary mt-2">재연결 시도</button>
                        </div>
                    `);
                    
                    errorMessage.find('#manual-reconnect').click(function() {
                        $('#connection-error').text('재연결 시도 중...');
                        socket.connect();
                    });
                    
                    return errorMessage;
                }
                
                // 개선된 선택지 패턴 - 더 포괄적인 정규식
                const choicePattern = /(?:^|\n)(\d+)[\.\)]\s*([^\n\.]+?)(?=$|\n|\.)/g;
                let choices = [];
                let match;
                
                console.log('선택지 검색 시작:', message);
                
                // 모든 선택지 찾기
                while ((match = choicePattern.exec(message)) !== null) {
                    // 선택지 번호가 반드시 1-4 사이여야 함
                    if (['1', '2', '3', '4'].includes(match[1])) {
                        const number = match[1].trim();
                        const text = match[2].trim();
                        
                        console.log(`선택지 발견: ${number}. ${text}`);
                        
                        choices.push({
                            number: number,
                            text: text
                        });
                    }
                }
                
                console.log('찾은 선택지:', choices.length, choices);
                
                // 최소 1개 이상의 선택지가 있는지 확인
                if (choices.length === 0) {
                    console.warn('유효한 선택지를 찾을 수 없습니다:', message);
                    
                    // 선택지가 없을 경우 게임 진행 불가 알림
                    const errorMessage = $(`
                        <div class="system-message error">
                            선택지를 찾을 수 없습니다. 게임을 다시 시작해주세요.
                            <button id="restart-button" class="btn btn-primary mt-2">게임 다시 시작</button>
                            <button id="game-continue" class="btn btn-warning mt-2">계속 진행 시도</button>
                        </div>
                    `);
                    
                    // 게임 다시 시작 버튼 이벤트
                    errorMessage.find('#restart-button').click(function() {
                        restartGame();
                    });
                    
                    // 계속 진행 시도 버튼 - 기본 선택지 제공
                    errorMessage.find('#game-continue').click(function() {
                        const defaultChoices = [
                            { number: '1', text: '계속 진행하기' },
                            { number: '2', text: '다른 방향으로 탐색하기' },
                            { number: '3', text: '이전 행동 반복하기' },
                            { number: '4', text: '잠시 휴식하기' }
                        ];
                        
                        const buttonContainer = $('<div class="choice-buttons"></div>');
                        defaultChoices.forEach(choice => {
                            const button = $(`
                                <button class="choice-button">
                                    ${choice.number}. ${choice.text}
                                </button>
                            `);
                            
                            button.click(function() {
                                if (!currentGameId) return;
                                
                                // 모든 버튼 비활성화
                                $('.choice-button').prop('disabled', true);
                                
                                // 선택한 메시지를 채팅창에 추가
                                $('#chatbox').append(`<div class="message user-message">${choice.number}. ${choice.text}</div>`);
                                
                                // 서버에 메시지 전송
                                socket.emit('chat message', {
                                    message: choice.number,
                                    game_id: currentGameId
                                });
                        
                                // 채팅창 스크롤
                                $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);
                            });
                            
                            buttonContainer.append(button);
                        });
                        
                        // 오류 메시지 제거 후 기본 선택지 추가
                        errorMessage.replaceWith(buttonContainer);
                    });
                    
                    return errorMessage;
                }
                
                // 선택지 버튼 생성
                const buttonContainer = $('<div class="choice-buttons"></div>');
                choices.forEach(choice => {
                    const button = $(`
                        <button class="choice-button">
                            ${choice.number}. ${choice.text}
                        </button>
                    `);
                    
                    button.click(function() {
                        if (!currentGameId) return;
                        
                        // 연결 상태 확인
                        if (!isConnected) {
                            alert('서버 연결이 끊어져 선택을 처리할 수 없습니다.');
                            return;
                        }
                        
                        // 모든 버튼 비활성화
                        $('.choice-button').prop('disabled', true);
                        
                        // 선택한 메시지를 채팅창에 추가
                        $('#chatbox').append(`<div class="message user-message">${choice.number}. ${choice.text}</div>`);
                        
                        // 서버에 메시지 전송
                        socket.emit('chat message', {
                            message: choice.number,
                            game_id: currentGameId
                        });
                
                        // 채팅창 스크롤
                        $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);
                    });
                    
                    buttonContainer.append(button);
                });
            
                return buttonContainer;
            }
            
            // 채팅 응답 처리
            socket.on('chat response', function(data) {
                if (data.success) {
                    // 로딩 숨기기
                    hideLoading();
                    
                    // 오류 메시지 제거 (있는 경우)
                    $('#connection-error').remove();
                    
                    // 응답 메시지 표시
                    $('#chatbox').append(`<div class="message assistant-message">${data.response}</div>`);
                    
                    // 응답 로깅
                    console.log('AI 응답:', data.response);
                    
                    try {
                        // 선택지 버튼 생성 및 추가
                        const buttons = createChoiceButtons(data.response);
                        if (buttons) {
                            $('#chatbox').append(buttons);
                        }
                        
                        // 중요: 서버로부터 받은 게임 상태 업데이트
                        if (data.game_state) {
                            console.log('게임 상태 업데이트:', data.game_state);
                            gameData = data.game_state;
                        }
                    } catch (error) {
                        console.error('선택지 처리 오류:', error);
                        $('#chatbox').append(`
                            <div class="system-message error">
                                선택지 처리 중 오류가 발생했습니다: ${error.message}
                                <button id="restart-button" class="btn btn-primary mt-2">게임 다시 시작</button>
                            </div>
                        `);
                    }
                } else {
                    // 로딩 숨기기
                    hideLoading();
                    
                    $('#chatbox').append(`
                        <div class="message error">
                            오류: ${data.error}
                            <button id="restart-button" class="btn btn-danger mt-2">게임 다시 시작</button>
                        </div>
                    `);
                }
                $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);
            });
            
            // 새 게임 시작
            $('#new-game').click(function() {
                if (currentGameId && !confirm('새 게임을 시작하시겠습니까?')) return;
                
                if (!isConnected) {
                    alert('서버에 연결되어 있지 않습니다. 재연결 후 다시 시도해주세요.');
                    return;
                }
                
                // 버튼 로딩 상태 설정
                setButtonLoading($(this), true);
                
                // 로딩 오버레이 표시
                showLoading('새 게임을 시작하는 중...');
                
                socket.emit('new game', {
                    assistant_id: $('#assistant-select').val()
                });
            });
            
            // 새 게임 응답
            socket.on('new game response', function(data) {
                // 새 게임 버튼 로딩 상태 해제
                setButtonLoading($('#new-game'), false);
                
                if (data.success) {
                    // 로딩 숨기기
                    hideLoading();
                    
                    $('#connection-error').remove(); // 오류 메시지 제거 (있는 경우)
                    
                    currentGameId = data.game_id;
                    gameData = data.game_data;
                    $('#chatbox').empty();
                    
                    if (data.initial_message) {
                        $('#chatbox').append(`<div class="message assistant-message">${data.initial_message}</div>`);
                        
                        try {
                            const buttons = createChoiceButtons(data.initial_message);
                            if (buttons) {
                                $('#chatbox').append(buttons);
                            }
                        } catch (error) {
                            console.error('초기 선택지 처리 오류:', error);
                            $('#chatbox').append(`
                                <div class="system-message error">
                                    선택지 처리 중 오류가 발생했습니다: ${error.message}
                                    <button id="restart-button" class="btn btn-primary mt-2">게임 다시 시작</button>
                                </div>
                            `);
                        }
                    } else {
                        $('#chatbox').append(`
                            <div class="system-message">
                                게임이 시작되었지만 초기 메시지를 받지 못했습니다.
                                <button id="restart-button" class="btn btn-primary mt-2">게임 다시 시작</button>
                            </div>
                        `);
                    }
                    
                    $('#assistant-select').prop('disabled', true);
                    
                    // 게임 목록 업데이트 체크
                    setTimeout(() => {
                        if (!$('#saved_games_list').children().length) {
                            loadGamesList();
                        }
                    }, 1000);
                } else {
                    // 로딩 숨기기
                    hideLoading();
                    
                    alert(data.error || '게임 시작 중 오류가 발생했습니다.');
                }
            });
            
            // 게임 저장
            $('#save-game').click(function() {
                if (!currentGameId || !gameData) {
                    alert('저장할 게임이 없습니다.');
                    return;
                }
                
                try {
                    // 버튼 로딩 상태 설정
                    setButtonLoading($(this), true);
                    
                    // 로딩 오버레이 표시
                    showLoading('게임을 저장하는 중...');
                    
                    // 게임 데이터 로깅
                    console.log('저장 요청 - gameData 타입:', typeof gameData);
                    console.log('저장 요청 - gameData:', gameData);
                    
                    // 유효한 객체인지 확인 
                    if (gameData === null || gameData === undefined) {
                        throw new Error('게임 데이터가 없습니다');
                    }
                    
                    // 깊은 복사로 데이터 전송 - JSON 직렬화 이슈 방지
                    const gameCopy = JSON.parse(JSON.stringify(gameData));
                    
                    // 서버로 전송
                    socket.emit('save game', {
                        game_id: currentGameId,
                        game_data: gameCopy
                    });
                } catch (err) {
                    // 오류 처리
                    console.error('게임 저장 처리 중 오류:', err);
                    
                    // 버튼 로딩 상태 해제
                    setButtonLoading($('#save-game'), false);
                    
                    // 로딩 숨기기
                    hideLoading();
                    
                    alert('게임 데이터 처리 중 오류가 발생했습니다: ' + err.message);
                }
            });
            
            // 저장 진행 상황 처리
            socket.on('save game progress', function(data) {
                if (data.status === 'saving') {
                    // 저장 중 표시
                    $('#chatbox').append(`<div class="message system-message">${data.message}</div>`);
                    $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);
                }
            });
            
            // 게임 저장 응답 처리
            socket.on('save game response', function(data) {
                // 저장 버튼 상태 복원
                setButtonLoading($('#save-game'), false);
                
                // 로딩 숨기기
                hideLoading();
                
                if (data.success) {
                    // 성공 메시지 표시
                    alert('게임이 저장되었습니다!');
                    
                    // 이전 메시지 및 버튼 제거
                    $('#chatbox').empty();
                    
                    // 요약 정보에서 위치 정보 추출
                    let locationFromSummary = extractLocationFromSummary(data.summary);
                    console.log('요약에서 추출한 위치 정보:', locationFromSummary);
                    
                    // 현재 게임 데이터 업데이트
                    if (gameData && locationFromSummary) {
                        // 게임 데이터의 위치 정보 업데이트
                        gameData.location.current = locationFromSummary;
                        console.log('게임 데이터 위치 정보 업데이트:', gameData.location.current);
                    }
                    
                    // 요약 응답 표시 (사용자 메시지로)
                    $('#chatbox').append(`<div class="message user-message">이전 게임 요약: ${data.summary}</div>`);
                    
                    // 새 스레드의 응답 표시
                    $('#chatbox').append(`<div class="message assistant-message">${data.initialResponse}</div>`);
                    
                    // 선택지 버튼 생성
                    const buttons = createChoiceButtons(data.initialResponse);
                    if (buttons) {
                        $('#chatbox').append(buttons);
                    }
                    
                    // 스크롤 조정
                    $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);
                    
                    // 게임 목록 강제 갱신
                    console.log('게임 목록 강제 갱신 요청');
                    loadGamesList(true);
                } else {
                    alert('게임 저장 중 오류: ' + data.error);
                }
            });
            
            // 저장된 게임 목록 응답
            socket.on('games list response', function(data) {
                if (data.success) {
                    const savedGamesList = $('#saved_games_list');
                    savedGamesList.empty();
        
                    if (data.games.length === 0) {
                        savedGamesList.append('<p>저장된 게임이 없습니다.</p>');
                        return;
                    }
        
                    // 디버깅을 위한 전체 게임 데이터 로깅
                    console.log('불러온 전체 게임 목록:', data.games);
        
                    data.games.forEach(function(game) {
                        // 마지막 저장 시간 포맷팅
                        const gameDate = new Date(game.last_updated).toLocaleString();
                        
                        // 게임 데이터 로깅
                        console.log(`게임 ID ${game.game_id} 데이터:`, game.game_data);
                        
                        // 위치 정보 추출 (없으면 기본값)
                        const currentLocation = (game.game_data && game.game_data.location && game.game_data.location.current) 
                            ? game.game_data.location.current 
                            : "알 수 없음";
                        
                        // 현재 게임 여부에 따른 강조 표시
                        const isCurrentGame = (game.game_id === currentGameId);
                        const highlightClass = isCurrentGame ? 'current-game' : '';
                        
                        // 위치 정보를 강조한 게임 항목 생성
                        savedGamesList.append(`
                            <div class="game-entry ${highlightClass}" data-game-id="${game.game_id}">
                                <span><strong>마지막 저장:</strong> ${gameDate}</span>
                                <span class="location-info"><strong>위치:</strong> ${currentLocation}</span>
                                <div class="game-actions">
                                    <button class="btn btn-primary" onclick="loadGame('${game.game_id}')">불러오기</button>
                                    <button class="btn btn-danger" onclick="deleteGame('${game.game_id}')" style="margin-left: 5px;">삭제</button>
                                </div>
                            </div>
                        `);
                    });
                    
                    // 현재 선택된 게임으로 스크롤
                    if (currentGameId) {
                        const currentGameElement = $(`.game-entry[data-game-id="${currentGameId}"]`);
                        if (currentGameElement.length) {
                            $('#game-load-list').scrollTop(currentGameElement.position().top);
                        }
                    }
                } else {
                    alert('게임 목록을 불러오는 중 오류가 발생했습니다: ' + data.error);
                }
            });
            
            // 불러오기 함수 보완 (window.loadGame)
            window.loadGame = function(gameId) {
                // 기존 게임 진행 중인지 확인
                if (currentGameId && !confirm('다른 게임을 불러오면 현재 진행 중인 게임은 저장되지 않습니다. 계속하시겠습니까?')) {
                    return;
                }
                
                // 로딩 오버레이 표시
                showLoading('게임을 불러오는 중...');
                
                // 로딩 메시지 표시
                $('#chatbox').empty().append(`<div class="message system-message">게임을 불러오는 중...</div>`);
                
                socket.emit('load game', {
                    game_id: gameId
                });
            }
            
            // 불러오기 응답 처리 개선
            socket.on('load game response', function(data) {
                // 로딩 숨기기
                hideLoading();
                
                if (data.success) {
                    currentGameId = data.game.game_id;
                    gameData = data.game.game_data;
                    
                    $('#chatbox').empty();
                    
                    if (data.game.chatHistory && data.game.chatHistory.length > 0) {
                        // 채팅 히스토리 표시 (시간순으로 정렬)
                        const chatHistory = [...data.game.chatHistory].sort((a, b) => {
                            const dateA = new Date(a.created_at);
                            const dateB = new Date(b.created_at);
                            return dateA - dateB;
                        });
                        
                        // 대화 내용 표시
                        chatHistory.forEach(msg => {
                            const messageClass = msg.role === 'user' ? 'user-message' : 'assistant-message';
                            $('#chatbox').append(`<div class="message ${messageClass}">${msg.content}</div>`);
                        });
                        
                        // 마지막 메시지가 AI 응답인지 확인하고 선택지 버튼 생성
                        const lastMessage = chatHistory[chatHistory.length - 1];
                        if (lastMessage && lastMessage.role === 'assistant') {
                            console.log('Creating choice buttons for last AI message');
                            const buttons = createChoiceButtons(lastMessage.content);
                            if (buttons) {
                                $('#chatbox').append(buttons);
                            } else {
                                console.warn('Failed to create choice buttons');
                            }
                        }
                    }
                    
                    $('#assistant-select').prop('disabled', true);
                    $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);
                    
                } else {
                    $('#chatbox').empty().append(`<div class="message error">게임을 불러오는 중 오류: ${data.error}</div>`);
                }
            });
            
            // 게임 삭제
            window.deleteGame = function(gameId) {
                if (!confirm('정말 이 게임을 삭제하시겠습니까?')) return;
                
                socket.emit('delete game', {
                    game_id: gameId
                });
            }
        
            // 게임 삭제 응답
            socket.on('delete game response', function(data) {
                if (data.success) {
                    if (currentGameId === data.game_id) {
                        currentGameId = null;
                        gameData = null;
                        $('#chatbox').empty();
                        $('#assistant-select').prop('disabled', false);
                    }
                    alert('게임이 삭제되었습니다.');
                    loadGamesList();
                } else {
                    alert('게임 삭제 중 오류: ' + data.error);
                }
            });
        
            // 초기 게임 목록 로드
            loadGamesList();
            
            // 로그아웃 처리
            $('#logout-button').on('click', function(e) {
                e.preventDefault();
                
                if (confirm('정말 로그아웃 하시겠습니까?')) {
                    window.location.href = '/auth/logout';
                }
            });
        });
    </script>
</body>
</html>