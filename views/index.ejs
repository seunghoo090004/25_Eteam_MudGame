<!-- views/index.ejs 원본 -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GPT Chat</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f0f0;
        }
        .chat-container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            overflow: hidden;
            display: flex;
            justify-content: space-between;
        }
        h1 {
            background-color: #007bff;
            color: white;
            margin: 0;
            padding: 20px;
            text-align: center;
        }
        .controls {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #ddd;
        }
        #assistant-select {
            flex-grow: 1;
            margin-right: 10px;
            padding: 5px;
        }
        #new-game, #save-game {
            padding: 5px 10px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-left: 5px;
        }
        #new-game:hover, #save-game:hover {
            background-color: #218838;
        }
        #chatbox {
            height: 400px;
            overflow-y: scroll;
            padding: 20px;
            background-color: #f9f9f9;
            flex-grow: 1;
        }
        .input-area {
            display: flex;
            padding: 10px;
        }
        #user-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px 0 0 5px;
            resize: vertical;
            min-height: 50px;
        }
        #send-button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 0 5px 5px 0;
            cursor: pointer;
        }
        #send-button:hover {
            background-color: #0056b3;
        }
        .message {
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 5px;
            white-space: pre-wrap;
            word-break: break-word;
        }
        .user-message {
            background-color: #007bff;
            color: white;
            text-align: right;
        }
        .assistant-message {
            background-color: #e9ecef;
            text-align: left;
        }
        .error {
            color: red;
            font-weight: bold;
        }
        #game-load-list {
            width: 200px;
            background-color: #f0f0f0;
            padding: 20px;
            border-left: 1px solid #ddd;
        }
        #game-load-list h3 {
            text-align: center;
        }
        .game-entry {
            margin-bottom: 10px;
        }
        .game-entry span {
            display: block;
            margin-bottom: 5px;
        }
        .game-entry button {
            margin-right: 5px;
        }
        .choice-buttons {
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin: 10px 0;
            padding: 10px;
        }
        .choice-button {
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-align: left;
            transition: background-color 0.2s;
            width: 100%;
        }
    
        .choice-button:hover {
            background-color: #0056b3;
        }
    
        .choice-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div>
            <h1>[2024-08-16] GPT Assistants Chat</h1>
            <div class="controls">
                <select id="assistant-select">
                    <% assistants.forEach(function(assistant) { %>
                        <option value="<%= assistant.id %>"><%= assistant.name %></option>
                    <% }); %>
                </select>
                <button id="new-game">새 게임</button>
                <button id="save-game">게임 저장</button>
            </div>
            <div id="chatbox"></div>
            <div class="input-area" style="display: none;">
                <textarea id="user-input" placeholder="메세지를 입력해주세요. (Shift+Enter 줄바꿈, Enter 또는 Ctrl+Enter 보내기)"></textarea>
                <button id="send-button">보내기</button>
            </div>
        </div>

        <div id="game-load-list">
            <h3>저장된 게임 목록</h3>
            <div id="saved_games_list">
                <!-- 저장된 게임 리스트가 여기에 표시됩니다 -->
            </div>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            // socket 초기화를 제일 먼저 수행
            const socket = io({
                reconnection: true,
                reconnectionDelay: 1000,
                reconnectionDelayMax: 5000,
                reconnectionAttempts: 5
            });            

            let currentGameId = null;
            let gameData = null;
                // 소켓 연결 확인
            socket.on('connect', function() {
                console.log('Socket connected successfully');
                // 연결 후 즉시 게임 목록 로드
                loadGamesList();
            });


            // 소켓 연결 에러 처리
            socket.on('connect_error', function(error) {
                console.error('Socket connection error:', error);
            });

            function loadGamesList() {
                if (socket && socket.connected) {
                    socket.emit('get games list');
                } else {
                    console.error('Socket not connected. Cannot load games list.');
                }
            }

            // 선택지 버튼 생성 함수
            function createChoiceButtons(message) {
                // 이전 선택지 버튼들 제거
                $('.choice-buttons').remove();
                
                const lines = message.split('\n');
                const choices = lines
                    // 숫자로 시작하고 콜론이나 별표가 있는 모든 선택지를 찾음
                    .filter(line => /^\d+\.\s*(?:\*\*)?[^*]+(?:\*\*)?:?/.test(line))
                    .map(line => {
                        // 숫자와 나머지 텍스트 분리
                        const match = line.match(/^(\d+)\.\s*(?:\*\*)?([^*]+)(?:\*\*)?:?/);
                        if (match) {
                            return {
                                number: match[1].trim(),
                                text: match[2].trim()
                            };
                        }
                        return null;
                    })
                    .filter(choice => choice !== null);  // null 제거
            
                if (choices.length === 0) return null;
            
                const buttonContainer = $('<div class="choice-buttons"></div>');
                choices.forEach(choice => {
                    const button = $(`
                        <button class="choice-button">
                            ${choice.number}. ${choice.text}
                        </button>
                    `);
                    
                    button.click(function() {
                        if (!currentGameId) return;
                        
                        // 모든 버튼 비활성화
                        $('.choice-button').prop('disabled', true);
                        
                        // 선택한 메시지를 채팅창에 추가
                        $('#chatbox').append(`<div class="message user-message">${choice.number}. ${choice.text}</div>`);
                        
                        // 서버에 메시지 전송
                        socket.emit('chat message', {
                            message: choice.number,
                            game_id: currentGameId
                        });
            
                        // 채팅창 스크롤
                        $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);
                    });
                    
                    buttonContainer.append(button);
                });
            
                return buttonContainer;
            }
        
            // 소켓 연결 에러 처리
            socket.on('error', function(error) {
                console.error('Socket error:', error);
                alert('연결 오류가 발생했습니다: ' + error.message);
            });
        
            // 채팅 응답 처리
            socket.on('chat response', function(data) {
                if (data.success) {
                    // 응답 메시지 표시
                    $('#chatbox').append(`<div class="message assistant-message">${data.response}</div>`);
                    
                    // 선택지 버튼 생성 및 추가
                    const buttons = createChoiceButtons(data.response);
                    if (buttons) {
                        $('#chatbox').append(buttons);
                    }
        
                    if (data.game_state) {
                        gameData = data.game_state;
                        updateGameStateDisplay();
                    }
                } else {
                    $('#chatbox').append(`<div class="message error">Error: ${data.error}</div>`);
                }
                $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);
            });
        
            // 새 게임 시작
            $('#new-game').click(function() {
                if (!confirm('새 게임을 시작하시겠습니까?')) return;
        
                socket.emit('new game', {
                    assistant_id: $('#assistant-select').val()
                });
            });
        
            // 새 게임 응답
            socket.on('new game response', function(data) {
                if (data.success) {
                    currentGameId = data.game_id;
                    gameData = data.game_data;
                    $('#chatbox').empty();
                    
                    if (data.initial_message) {
                        $('#chatbox').append(`<div class="message assistant-message">${data.initial_message}</div>`);
                        const buttons = createChoiceButtons(data.initial_message);
                        if (buttons) {
                            $('#chatbox').append(buttons);
                        }
                    }
                    
                    $('#assistant-select').prop('disabled', true);
                    
                    // 게임 목록 업데이트 체크
                    setTimeout(() => {
                        if (!$('#saved_games_list').children().length) {
                            loadGamesList();
                        }
                    }, 1000);
                } else {
                    $('#errorMessage').removeClass('hidden').text(data.error || '게임 시작 중 오류가 발생했습니다.');
                }
            });
        
            // 게임 저장
            $('#save-game').click(function() {
                if (!currentGameId || !gameData) {
                    alert('저장할 게임이 없습니다.');
                    return;
                }
        
                socket.emit('save game', {
                    game_id: currentGameId,
                    game_data: gameData
                });
            });
        
            // 게임 저장 응답
            socket.on('save game response', function(data) {
                if (data.success) {
                    alert('게임이 저장되었습니다!');
                    loadGamesList();
                } else {
                    alert('게임 저장 중 오류: ' + data.error);
                }
            });
        
            // 게임 불러오기
            window.loadGame = function(gameId) {
                socket.emit('load game', {
                    game_id: gameId
                });
            }
        
            // 게임 불러오기 응답
            socket.on('load game response', function(data) {
                if (data.success) {
                    currentGameId = data.game.game_id;
                    gameData = data.game.game_data;
                    
                    $('#chatbox').empty();
                    
                    if (data.game.chatHistory) {
                        // 정렬된 채팅 히스토리를 순서대로 표시
                        data.game.chatHistory
                            .filter(msg => !msg.content.includes('New game initialization'))
                            .forEach(msg => {
                                const messageClass = msg.role === 'user' ? 'user-message' : 'assistant-message';
                                $('#chatbox').append(`<div class="message ${messageClass}">${msg.content}</div>`);
                            });
            
                        // 마지막 메시지가 assistant의 것인 경우 선택지 버튼 생성
                        const lastMessage = data.game.chatHistory[data.game.chatHistory.length - 1];
                        if (lastMessage && lastMessage.role === 'assistant') {
                            const buttons = createChoiceButtons(lastMessage.content);
                            if (buttons) {
                                $('#chatbox').append(buttons);
                            }
                        }
                    }
            
                    $('#assistant-select').prop('disabled', true);
                    $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);
                    updateGameStateDisplay();
                } else {
                    alert('게임을 불러오는 중 오류: ' + data.error);
                }
            });
            
            // 선택지 파싱 함수
            function parseChoices(content) {
                const lines = content.split('\n');
                return lines
                    .filter(line => /^\d+\.\s*\**[^*]+\**/.test(line))
                    .map(line => {
                        const match = line.match(/^(\d+)\.\s*\**([^*]+?)\**(?::|$)/);
                        if (match) {
                            return {
                                number: match[1].trim(),
                                text: match[2].trim()
                            };
                        }
                        return null;
                    })
                    .filter(choice => choice !== null);
            }
            
            // 선택 처리 함수
            function handleChoice(number, text) {
                if (!currentGameId) return;
                
                $('.choice-button').prop('disabled', true);
                
                $('#chatbox').append(`<div class="message user-message">${number}. ${text}</div>`);
                
                socket.emit('chat message', {
                    message: number,
                    game_id: currentGameId
                });
            
                $('#chatbox').scrollTop($('#chatbox')[0].scrollHeight);
            }
        
            // 게임 상태 표시 업데이트
            function updateGameStateDisplay() {
                if (!gameData) return;
                // 게임 상태를 UI에 반영하는 코드
                // 필요한 경우 구현
            }
        
            // 게임 목록 불러오기
            function loadGamesList() {
                socket.emit('get games list');
            }
        
            // 게임 목록 응답
            socket.on('games list response', function(data) {
                if (data.success) {
                    const savedGamesList = $('#saved_games_list');
                    savedGamesList.empty();
        
                    if (data.games.length === 0) {
                        savedGamesList.append('<p>저장된 게임이 없습니다.</p>');
                        return;
                    }
        
                    data.games.forEach(function(game) {
                        const gameDate = new Date(game.last_updated).toLocaleString();
                        savedGamesList.append(`
                            <div class="game-entry">
                                <span>마지막 저장: ${gameDate}</span>
                                <span>위치: ${game.game_data.location.current}</span>
                                <span>레벨: ${game.game_data.player.level}</span>
                                <button onclick="loadGame('${game.game_id}')">불러오기</button>
                                <button onclick="deleteGame('${game.game_id}')">삭제</button>
                            </div>
                        `);
                    });
                } else {
                    alert('게임 목록을 불러오는 중 오류가 발생했습니다.');
                }
            });
        
            // 게임 삭제
            window.deleteGame = function(gameId) {
                if (!confirm('정말 이 게임을 삭제하시겠습니까?')) return;
                
                socket.emit('delete game', {
                    game_id: gameId
                });
            }
        
            // 게임 삭제 응답
            socket.on('delete game response', function(data) {
                if (data.success) {
                    if (currentGameId === data.game_id) {
                        currentGameId = null;
                        gameData = null;
                        $('#chatbox').empty();
                        $('#assistant-select').prop('disabled', false);
                    }
                    alert('게임이 삭제되었습니다.');
                    loadGamesList();
                } else {
                    alert('게임 삭제 중 오류: ' + data.error);
                }
            });
        
            // 초기 게임 목록 로드
            loadGamesList();
        });
    </script>
</body>
</html>